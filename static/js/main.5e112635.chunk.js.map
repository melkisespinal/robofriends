{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","reportWebVitals.js","index.js"],"names":["Card","id","name","email","className","alt","src","CardList","robots","map","user","searchBox","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","error","info","this","setState","React","Component","App","onSearchChange","event","searchField","target","value","fetch","then","res","json","users","filteredRobots","filter","robot","toLowerCase","includes","length","SearchBox","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2OAgBeA,EAVF,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,GAAIC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,MACvB,OACE,sBAAKC,UAAU,sDAAf,UACE,qBAAKC,IAAI,QAAQC,IAAG,+BAA0BL,EAA1B,cACpB,6BAAKC,IACL,4BAAIC,QCgBKI,EAnBE,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAChB,OACI,8BAEQA,EAAOC,KAAI,SAAAC,GACP,OACI,cAAC,EAAD,CAEIT,GAAIS,EAAKT,GACTC,KAAMQ,EAAKR,KACXC,MAAOO,EAAKP,OAHPO,EAAKT,UCGvBU,EAbG,SAAC,GAAsB,IAApBC,EAAmB,EAAnBA,aACjB,OACI,qBAAKR,UAAU,MAAf,SACI,uBACIA,UAAU,mCACVS,KAAK,SACLC,YAAY,gBACZC,SAAUH,OCEXI,EARA,SAACC,GACZ,OACI,qBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,SAArE,SACKJ,EAAMK,YCaJC,E,kDAnBX,WAAYN,GAAO,IAAD,8BACd,cAAMA,IACDO,MAAQ,CACTC,UAAU,GAHA,E,8DAOAC,EAAOC,GACrBC,KAAKC,SAAS,CAACJ,UAAU,M,+BAIzB,OAAGG,KAAKJ,MAAMC,SACH,uDAEJG,KAAKX,MAAMK,a,GAhBEQ,IAAMC,WC2DnBC,G,wDA/CX,aAAc,IAAD,8BACT,gBAoBJC,eAAiB,SAACC,GAGd,EAAKL,SAAS,CAAEM,YAAaD,EAAME,OAAOC,SAtB1C,EAAKb,MAAQ,CACThB,OAAQ,GACR2B,YAAa,IAJR,E,gEAWO,IAAD,OACfG,MAAM,8CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKb,SAAS,CAACrB,OAAQkC,S,+BAarC,IAAD,EAC0Bd,KAAKJ,MAA5BhB,EADH,EACGA,OAAQ2B,EADX,EACWA,YACTQ,EAAiBnC,EAAOoC,QAAO,SAAAC,GACjC,OAAOA,EAAM3C,KAAK4C,cAAcC,SAASZ,MAE7C,OAAQ3B,EAAOwC,OAGP,sBAAK5C,UAAU,KAAf,UACI,oBAAIA,UAAU,KAAd,yBACA,cAAC6C,EAAD,CAAWrC,aAAcgB,KAAKK,iBAC9B,cAAC,EAAD,UACI,cAAC,EAAD,UACI,cAAC,EAAD,CAAUzB,OAASmC,WAPnC,gD,GAlCMb,IAAMC,YCDTmB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,MCAdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.5e112635.chunk.js","sourcesContent":["/**\n * @description: Pure function Component that accepts card parameters\n * and displays them.\n * @author: Melkis Espinal\n */\n\nconst Card = ({id, name, email}) => {\n  return (\n    <div className='tc bg-light-green dib br3 pa3 ma2 bw2 shadow-5 grow'>\n      <img alt='Robot' src={`https://robohash.org/${id}?200x200`}/>\n      <h2>{name}</h2>\n      <p>{email}</p>\n    </div>\n  );\n}\n\nexport default Card;","/**\n * @description: Pure function React Component that returns a list\n * of Card Components to be rendered.\n * @author: Melkis Espinal\n */\n\nimport Card from \"./Card\";\n\nconst CardList = ({ robots }) => {\n    return (\n        <div>\n            {\n                robots.map(user => {\n                    return (\n                        <Card \n                            key={user.id} \n                            id={user.id} \n                            name={user.name} \n                            email={user.email}\n                        />\n                    );\n                })\n            }\n        </div>\n    );\n}\n\nexport default CardList;","/**\n * @description: Pure function React Component for a search field input.\n * @author: Melkis Espinal\n */\n\nconst searchBox = ({ searchChange }) => {\n    return (\n        <div className='pa2'>\n            <input \n                className='pa3 ba b--green bg-lightest-blue'\n                type='search' \n                placeholder='Search Robots'\n                onChange={searchChange}\n            />\n        </div>\n    );\n}\n\nexport default searchBox;","/**\n * @description: Pure function React Component that makes its children\n * scrollable.\n * @author: Melkis Espinal\n */\n\nconst Scroll = (props) => {\n    return (\n        <div style={{overflowY: 'scroll', border: '1px solid black', height: '800px'}}>\n            {props.children}\n        </div>\n    );\n};\n\nexport default Scroll;","import React from 'react';\n\nclass ErrorBoundary extends React.Component {\n    constructor(props){\n        super(props);\n        this.state = {\n            hasError: false\n        };\n    }\n\n    componentDidCatch(error, info){\n        this.setState({hasError: true});\n    }\n\n    render(){\n        if(this.state.hasError){\n            return <h1>Something went wrong!</h1>\n        }\n        return this.props.children;\n    }\n}\n\nexport default ErrorBoundary;","/**\n * @description: React Component as a class to be able to access React methods and\n * control the State.\n * @author: Melkis Espinal\n */\n\nimport React from 'react';\nimport CardList from '../components/CardList';\nimport SearchBox from '../components/SearchBox';\nimport Scroll from '../components/Scroll';\nimport ErrorBoundary from '../components/ErrorBoundary'\nimport './App.css';\n\nclass App extends React.Component {\n    constructor(){\n        super();\n        this.state = {\n            robots: [],\n            searchField: '',\n        };\n    }\n\n    /**\n     * When the components mount (when it renders), fetch the users from this API\n     */\n    componentDidMount(){\n        fetch('https://jsonplaceholder.typicode.com/users')\n            .then(res => res.json()) //convert to JSON\n            .then(users => this.setState({robots: users})); //update Robots / State\n    };\n    \n    /**\n     * On any change of the search field input, update robots\n     * @param {*} event: Event onChange from Search Field Component (listener)\n     */\n    onSearchChange = (event) => {\n        //ALWAYS USE REACT'S SETSTATE() METHOD TO CHANGE STATE\n        //NEVER DO IT DIRECTLY\n        this.setState({ searchField: event.target.value});\n    }\n\n    render(){\n        const {robots, searchField} = this.state;\n        const filteredRobots = robots.filter(robot => {\n            return robot.name.toLowerCase().includes(searchField);\n        });\n        return !robots.length ? \n            <h1>Loading...</h1> :\n            (\n                <div className='tc'>\n                    <h1 className=\"f2\">RoboFriends</h1>\n                    <SearchBox searchChange={this.onSearchChange}/>\n                    <Scroll>\n                        <ErrorBoundary>\n                            <CardList robots ={filteredRobots}/>\n                        </ErrorBoundary>\n                    </Scroll>\n                </div>\n            );\n    }\n}\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}